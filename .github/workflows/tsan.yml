name: Run ThreadSanitizer

on:
  push:

jobs:
  run-tsan:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2 
        with:
          ref: cb209f9b9e02f3fb3a09a6e88d49bcef9f95511f

      - name: Install dependencies for project (Linux)
        if: runner.os == 'Linux'
        run: | 
          sudo apt-get update
          sudo apt remove -y libvirt-daemon-system-sysv
          sudo apt-get install -y libvirt-daemon-system-systemd
          sudo apt-get install -y \
              libxpm4 net-tools bzip2 wget vim gcc g++ samba dos2unix libc6-dev \
               rsync autogen autoconf automake libtool gettext bison binutils \
              flex libdmraid-dev libsdl1.2-dev libpciaccess0 libusb-1.0-0 libusb-dev libfreetype6 libfreetype6-dev \
              virt-* libvte-* network-manager libbrlapi-dev libfuse-dev gnu-efi sbsigntool \
              grub2 xorriso nasm yasm 
              
          
      - name: Build repository 
        run: | 
          wget -P ./DOC https://www.fefe.de/dietlibc/dietlibc-0.34.tar.xz
          wget -P ./DOC https://musl.libc.org/releases/musl-1.2.1.tar.gz
          wget -P ./GRUB2 https://ftp.gnu.org/gnu/grub/grub-2.04.tar.xz
          wget -P ./EDK2 https://codeload.github.com/tianocore/edk2/zip/edk2-stable201911
          wget -P ./ExFAT https://codeload.github.com/relan/exfat/zip/v1.3.0
          wget -P ./ExFAT https://codeload.github.com/libfuse/libfuse/zip/fuse-2.9.9
          wget -P /opt/ https://releases.linaro.org/components/toolchain/binaries/7.4-2019.02/aarch64-linux-gnu/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu.tar.xz
          wget -P /opt/ https://toolchains.bootlin.com/downloads/releases/toolchains/aarch64/tarballs/aarch64--uclibc--stable-2020.08-1.tar.bz2
          wget -P /opt/ https://github.com/ventoy/vtoytoolchain/releases/download/1.0/mips-loongson-gcc7.3-2019.06-29-linux-gnu.tar.gz
          wget -P /opt/ https://github.com/ventoy/musl-cross-make/releases/download/latest/output.tar.bz2
          wget -P ./LiveCD/ISO/EFI/boot http://www.tinycorelinux.net/11.x/x86_64/release/distribution_files/vmlinuz64
          wget -P ./LiveCD/ISO/EFI/boot http://www.tinycorelinux.net/11.x/x86_64/release/distribution_files/corepure64.gz
          wget -P ./LiveCD/ISO/EFI/boot http://www.tinycorelinux.net/11.x/x86_64/release/distribution_files/modules64.gz
          cd ./DOC && tar xf musl-1.2.1.tar.gz
          cd musl-1.2.1 && ./configure && sudo make install
          tar xf /opt/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu.tar.xz  -C /opt 
          tar xf /opt/aarch64--uclibc--stable-2020.08-1.tar.bz2  -C /opt
          tar xf /opt/output.tar.bz2  -C /opt
          sudo mv /opt/output /opt/mips64el-linux-musl-gcc730
          export PATH=$PATH:/opt/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu/bin:/opt/aarch64--uclibc--stable-2020.08-1/bin:/opt/mips64el-linux-musl-gcc730/bin >> ~/.bashrc
          source ~/.bashrc

      - name: Install ThreadSanitizer dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y clang-14 libclang-14-dev llvm-14 llvm-14-dev llvm-14-tools llvm-14-linker-tools
      
      - name: Run Google Thread Sanitizer (source code) (Linux)
        if: runner.os == 'Linux'
        run: |
            #!/bin/bash
            set +e

            files=$(find . -type f)
            TIMEOUT_DURATION=10

            for file in $files; do
                if [[ "$file" == *.c || "$file" == *.cpp ]]; then
                    include_dirs=$(find . -name '*.h' -exec dirname {} + | sort -u | sed 's/^/-I /')
                    if ! timeout 60 clang -I "$include_dirs" -fsanitize=thread -fPIE -pie -O2  -g "$file" -o ./compiled.out > /dev/null 2> /tmp/clang_errors.txt; then
                        exit_code=$?
                        if [ $exit_code -eq 1 ]; then
                            continue
                        fi
                        continue 
                    fi

                    timeout $TIMEOUT_DURATION ./compiled.out
                    rm -f ./compiled.out
                fi
            done
